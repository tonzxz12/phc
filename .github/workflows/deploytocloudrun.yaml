name: Build and Deploy to Cloud Run

on:
  workflow_dispatch:

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }}  # e.g., us-central1
  REPOSITORY: ${{ vars.GAR_REPOSITORY }}  # e.g., web-containers
  SERVICE: ${{ vars.CLOUD_RUN_SERVICE }}  # e.g., my-service
  REGION: ${{ vars.GCP_REGION }}          # e.g., us-central1
  CONTAINER_PORT: ${{ vars.CONTAINER_PORT }}     # e.g. 5000
  MIN_INSTANCES: ${{ vars.MIN_INSTANCES }}       # e.g. 0
  MAX_INSTANCES: ${{ vars.MAX_INSTANCES }}       # e.g. 10
  MEMORY: ${{ vars.MEMORY }}                     # e.g. 512Mi
  CPU: ${{ vars.CPU }}                           # e.g. 1
  GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS_JSON }}

jobs:
  deploy:
    environment: production-whitelabel
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          credentials_json: '${{ env.GCP_CREDENTIALS_JSON }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Create Artifact Registry if not exists
        run: |
          if ! gcloud artifacts repositories describe $REPOSITORY --location=$GAR_LOCATION 2>/dev/null; then
            echo "Creating Artifact Registry repository $REPOSITORY..."
            gcloud artifacts repositories create $REPOSITORY \
              --repository-format=docker \
              --location=$GAR_LOCATION \
              --description="Docker repository for $SERVICE"
          else
            echo "Artifact Registry repository $REPOSITORY already exists."
          fi

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${GAR_LOCATION}-docker.pkg.dev --quiet

      - name: Build and Push Container
        run: |
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: Create Cloud Run service if not exists
        run: |
          if ! gcloud run services describe $SERVICE --region=$REGION --format="value(status.url)" 2>/dev/null; then
            echo "Creating Cloud Run service $SERVICE..."
            gcloud run deploy $SERVICE \
              --image="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" \
              --region=$REGION \
              --port=$CONTAINER_PORT \
              --platform=managed \
              --allow-unauthenticated
          else
            echo "Cloud Run service $SERVICE already exists."
          fi
          
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}
          flags: >
            --port=${{ env.CONTAINER_PORT }}
            --min-instances=${{ env.MIN_INSTANCES }}
            --max-instances=${{ env.MAX_INSTANCES }}
            --memory=${{ env.MEMORY }}
            --cpu=${{ env.CPU }}

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
